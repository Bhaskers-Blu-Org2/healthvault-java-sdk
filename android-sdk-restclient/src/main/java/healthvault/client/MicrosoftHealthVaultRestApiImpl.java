/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package healthvault.client;

import healthvault.client.MicrosoftHealthVaultRestApi;
import com.microsoft.rest.ServiceClient;
import com.microsoft.rest.RestClient;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import healthvault.client.models.ActionPlan;
import healthvault.client.models.ActionPlanAdherenceSummary;
import healthvault.client.models.ActionPlanInstance;
import healthvault.client.models.ActionPlansResponseActionPlanInstance;
import healthvault.client.models.ActionPlanTask;
import healthvault.client.models.ActionPlanTaskInstance;
import healthvault.client.models.ActionPlanTasksResponseActionPlanTaskInstance;
import healthvault.client.models.ActionPlanTaskTrackingResponseActionPlanTaskTracking;
import healthvault.client.models.Goal;
import healthvault.client.models.GoalsResponse;
import healthvault.client.models.GoalsWrapper;
import healthvault.client.models.MicrosoftKhronosCloudCommonErrorsErrorResponseException;
import healthvault.client.models.OnboardingRequest;
import healthvault.client.models.OnboardingResponse;
import healthvault.client.models.TrackingValidation;
import java.io.IOException;
import okhttp3.ResponseBody;
import org.joda.time.DateTime;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the MicrosoftHealthVaultRestApi class.
 */
public class MicrosoftHealthVaultRestApiImpl extends ServiceClient implements MicrosoftHealthVaultRestApi {
    /**
     * The Retrofit service to perform REST calls.
     */
    private MicrosoftHealthVaultRestApiService service;

    /**
     * Initializes an instance of MicrosoftHealthVaultRestApi client.
     */
    public MicrosoftHealthVaultRestApiImpl() {
        this("https://data.ppe.microsofthealth.net/");
    }

    /**
     * Initializes an instance of MicrosoftHealthVaultRestApi client.
     *
     * @param baseUrl the base URL of the host
     */
    public MicrosoftHealthVaultRestApiImpl(String baseUrl) {
        super(baseUrl);
        initialize();
    }

    /**
     * Initializes an instance of MicrosoftHealthVaultRestApi client.
     *
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public MicrosoftHealthVaultRestApiImpl(OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        this("https://data.ppe.microsofthealth.net/", clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of MicrosoftHealthVaultRestApi client.
     *
     * @param baseUrl the base URL of the host
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public MicrosoftHealthVaultRestApiImpl(String baseUrl, OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        super(baseUrl, clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of MicrosoftHealthVaultRestApi client.
     *
     * @param restClient the REST client containing pre-configured settings
     */
    public MicrosoftHealthVaultRestApiImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    private void initialize() {
        initializeService();
    }

    private void initializeService() {
        service = retrofit().create(MicrosoftHealthVaultRestApiService.class);
    }

    /**
     * The interface defining all the services for MicrosoftHealthVaultRestApi to be
     * used by Retrofit to perform actually REST calls.
     */
    interface MicrosoftHealthVaultRestApiService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi getActionPlans" })
        @GET("ActionPlans")
        Observable<Response<ResponseBody>> getActionPlans(@Query("maxPageSize") Integer maxPageSize);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi putActionPlan" })
        @PUT("ActionPlans")
        Observable<Response<ResponseBody>> putActionPlan(@Body ActionPlanInstance actionPlan);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi createActionPlan" })
        @POST("ActionPlans")
        Observable<Response<ResponseBody>> createActionPlan(@Body ActionPlan actionPlan);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi patchActionPlan" })
        @PATCH("ActionPlans")
        Observable<Response<ResponseBody>> patchActionPlan(@Body ActionPlanInstance actionPlan);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi getActionPlanById" })
        @GET("ActionPlans/{actionPlanId}")
        Observable<Response<ResponseBody>> getActionPlanById(@Path("actionPlanId") String actionPlanId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi deleteActionPlan" })
        @HTTP(path = "ActionPlans/{actionPlanId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteActionPlan(@Path("actionPlanId") String actionPlanId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi deleteActionPlanObjective" })
        @HTTP(path = "ActionPlans/{actionPlanId}/Objectives/{objectiveId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteActionPlanObjective(@Path("actionPlanId") String actionPlanId, @Path("objectiveId") String objectiveId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi getActionPlanAdherence" })
        @GET("ActionPlans/{actionPlanId}/Adherence")
        Observable<Response<ResponseBody>> getActionPlanAdherence(@Path("actionPlanId") String actionPlanId, @Query("startTime") DateTime startTime, @Query("endTime") DateTime endTime, @Query("objectiveId") String objectiveId, @Query("taskId") String taskId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi getActionPlanTasks" })
        @GET("ActionPlanTasks")
        Observable<Response<ResponseBody>> getActionPlanTasks(@Query("actionPlanTaskStatus") String actionPlanTaskStatus, @Query("maxPageSize") Integer maxPageSize);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi putActionPlanTasks" })
        @PUT("ActionPlanTasks")
        Observable<Response<ResponseBody>> putActionPlanTasks(@Body ActionPlanTaskInstance actionPlanTask);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi postActionPlanTasks" })
        @POST("ActionPlanTasks")
        Observable<Response<ResponseBody>> postActionPlanTasks(@Body ActionPlanTask actionPlanTask);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi patchActionPlanTasks" })
        @PATCH("ActionPlanTasks")
        Observable<Response<ResponseBody>> patchActionPlanTasks(@Body ActionPlanTaskInstance actionPlanTask);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi getActionPlanTaskById" })
        @GET("ActionPlanTasks/{actionPlanTaskId}")
        Observable<Response<ResponseBody>> getActionPlanTaskById(@Path("actionPlanTaskId") String actionPlanTaskId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi deleteActionPlanTaskById" })
        @HTTP(path = "ActionPlanTasks/{actionPlanTaskId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteActionPlanTaskById(@Path("actionPlanTaskId") String actionPlanTaskId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi validateActionPlanTasksTracking" })
        @POST("ActionPlanTasks/ValidateTracking")
        Observable<Response<ResponseBody>> validateActionPlanTasksTracking(@Body TrackingValidation trackingValidation);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi getGoals" })
        @GET("Goals")
        Observable<Response<ResponseBody>> getGoals(@Query("types") String types, @Query("windowTypes") String windowTypes, @Query("startDate") DateTime startDate, @Query("endDate") DateTime endDate);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi putGoal" })
        @PUT("Goals")
        Observable<Response<ResponseBody>> putGoal(@Body Goal goal);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi createGoals" })
        @POST("Goals")
        Observable<Response<ResponseBody>> createGoals(@Body GoalsWrapper goalsWrapper);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi patchGoals" })
        @PATCH("Goals")
        Observable<Response<ResponseBody>> patchGoals(@Body GoalsWrapper goalsWrapper);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi getGoalById" })
        @GET("Goals/{goalId}")
        Observable<Response<ResponseBody>> getGoalById(@Path("goalId") String goalId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi deleteGoal" })
        @HTTP(path = "Goals/{goalId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteGoal(@Path("goalId") String goalId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi getActiveGoals" })
        @GET("Goals/active")
        Observable<Response<ResponseBody>> getActiveGoals(@Query("types") String types, @Query("windowTypes") String windowTypes);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: healthvault.client.MicrosoftHealthVaultRestApi generateInviteCode" })
        @POST("Onboarding/GenerateInviteCode")
        Observable<Response<ResponseBody>> generateInviteCode(@Body OnboardingRequest onboardingRequest);

    }

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstance object if successful.
     */
    public ActionPlansResponseActionPlanInstance getActionPlans() {
        return getActionPlansWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get a collection of action plans.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlansResponseActionPlanInstance> getActionPlansAsync(final ServiceCallback<ActionPlansResponseActionPlanInstance> serviceCallback) {
        return ServiceFuture.fromResponse(getActionPlansWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    public Observable<ActionPlansResponseActionPlanInstance> getActionPlansAsync() {
        return getActionPlansWithServiceResponseAsync().map(new Func1<ServiceResponse<ActionPlansResponseActionPlanInstance>, ActionPlansResponseActionPlanInstance>() {
            @Override
            public ActionPlansResponseActionPlanInstance call(ServiceResponse<ActionPlansResponseActionPlanInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    public Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> getActionPlansWithServiceResponseAsync() {
        final Integer maxPageSize = null;
        return service.getActionPlans(maxPageSize)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlansResponseActionPlanInstance> clientResponse = getActionPlansDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstance object if successful.
     */
    public ActionPlansResponseActionPlanInstance getActionPlans(Integer maxPageSize) {
        return getActionPlansWithServiceResponseAsync(maxPageSize).toBlocking().single().body();
    }

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlansResponseActionPlanInstance> getActionPlansAsync(Integer maxPageSize, final ServiceCallback<ActionPlansResponseActionPlanInstance> serviceCallback) {
        return ServiceFuture.fromResponse(getActionPlansWithServiceResponseAsync(maxPageSize), serviceCallback);
    }

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    public Observable<ActionPlansResponseActionPlanInstance> getActionPlansAsync(Integer maxPageSize) {
        return getActionPlansWithServiceResponseAsync(maxPageSize).map(new Func1<ServiceResponse<ActionPlansResponseActionPlanInstance>, ActionPlansResponseActionPlanInstance>() {
            @Override
            public ActionPlansResponseActionPlanInstance call(ServiceResponse<ActionPlansResponseActionPlanInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    public Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> getActionPlansWithServiceResponseAsync(Integer maxPageSize) {
        return service.getActionPlans(maxPageSize)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlansResponseActionPlanInstance> clientResponse = getActionPlansDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlansResponseActionPlanInstance> getActionPlansDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException {
        return this.restClient().responseBuilderFactory().<ActionPlansResponseActionPlanInstance, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ActionPlansResponseActionPlanInstance>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstance object if successful.
     */
    public ActionPlansResponseActionPlanInstance putActionPlan(ActionPlanInstance actionPlan) {
        return putActionPlanWithServiceResponseAsync(actionPlan).toBlocking().single().body();
    }

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlansResponseActionPlanInstance> putActionPlanAsync(ActionPlanInstance actionPlan, final ServiceCallback<ActionPlansResponseActionPlanInstance> serviceCallback) {
        return ServiceFuture.fromResponse(putActionPlanWithServiceResponseAsync(actionPlan), serviceCallback);
    }

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    public Observable<ActionPlansResponseActionPlanInstance> putActionPlanAsync(ActionPlanInstance actionPlan) {
        return putActionPlanWithServiceResponseAsync(actionPlan).map(new Func1<ServiceResponse<ActionPlansResponseActionPlanInstance>, ActionPlansResponseActionPlanInstance>() {
            @Override
            public ActionPlansResponseActionPlanInstance call(ServiceResponse<ActionPlansResponseActionPlanInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    public Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> putActionPlanWithServiceResponseAsync(ActionPlanInstance actionPlan) {
        if (actionPlan == null) {
            throw new IllegalArgumentException("Parameter actionPlan is required and cannot be null.");
        }
        Validator.validate(actionPlan);
        return service.putActionPlan(actionPlan)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlansResponseActionPlanInstance> clientResponse = putActionPlanDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlansResponseActionPlanInstance> putActionPlanDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ActionPlansResponseActionPlanInstance, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ActionPlansResponseActionPlanInstance>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object createActionPlan(ActionPlan actionPlan) {
        return createActionPlanWithServiceResponseAsync(actionPlan).toBlocking().single().body();
    }

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> createActionPlanAsync(ActionPlan actionPlan, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(createActionPlanWithServiceResponseAsync(actionPlan), serviceCallback);
    }

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> createActionPlanAsync(ActionPlan actionPlan) {
        return createActionPlanWithServiceResponseAsync(actionPlan).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> createActionPlanWithServiceResponseAsync(ActionPlan actionPlan) {
        if (actionPlan == null) {
            throw new IllegalArgumentException("Parameter actionPlan is required and cannot be null.");
        }
        Validator.validate(actionPlan);
        return service.createActionPlan(actionPlan)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = createActionPlanDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> createActionPlanDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Object, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(201, new TypeToken<ActionPlansResponseActionPlanInstance>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstance object if successful.
     */
    public ActionPlansResponseActionPlanInstance patchActionPlan(ActionPlanInstance actionPlan) {
        return patchActionPlanWithServiceResponseAsync(actionPlan).toBlocking().single().body();
    }

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlansResponseActionPlanInstance> patchActionPlanAsync(ActionPlanInstance actionPlan, final ServiceCallback<ActionPlansResponseActionPlanInstance> serviceCallback) {
        return ServiceFuture.fromResponse(patchActionPlanWithServiceResponseAsync(actionPlan), serviceCallback);
    }

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    public Observable<ActionPlansResponseActionPlanInstance> patchActionPlanAsync(ActionPlanInstance actionPlan) {
        return patchActionPlanWithServiceResponseAsync(actionPlan).map(new Func1<ServiceResponse<ActionPlansResponseActionPlanInstance>, ActionPlansResponseActionPlanInstance>() {
            @Override
            public ActionPlansResponseActionPlanInstance call(ServiceResponse<ActionPlansResponseActionPlanInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    public Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> patchActionPlanWithServiceResponseAsync(ActionPlanInstance actionPlan) {
        if (actionPlan == null) {
            throw new IllegalArgumentException("Parameter actionPlan is required and cannot be null.");
        }
        Validator.validate(actionPlan);
        return service.patchActionPlan(actionPlan)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlansResponseActionPlanInstance> clientResponse = patchActionPlanDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlansResponseActionPlanInstance> patchActionPlanDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ActionPlansResponseActionPlanInstance, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ActionPlansResponseActionPlanInstance>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanInstance object if successful.
     */
    public ActionPlanInstance getActionPlanById(String actionPlanId) {
        return getActionPlanByIdWithServiceResponseAsync(actionPlanId).toBlocking().single().body();
    }

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanInstance> getActionPlanByIdAsync(String actionPlanId, final ServiceCallback<ActionPlanInstance> serviceCallback) {
        return ServiceFuture.fromResponse(getActionPlanByIdWithServiceResponseAsync(actionPlanId), serviceCallback);
    }

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstance object
     */
    public Observable<ActionPlanInstance> getActionPlanByIdAsync(String actionPlanId) {
        return getActionPlanByIdWithServiceResponseAsync(actionPlanId).map(new Func1<ServiceResponse<ActionPlanInstance>, ActionPlanInstance>() {
            @Override
            public ActionPlanInstance call(ServiceResponse<ActionPlanInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstance object
     */
    public Observable<ServiceResponse<ActionPlanInstance>> getActionPlanByIdWithServiceResponseAsync(String actionPlanId) {
        if (actionPlanId == null) {
            throw new IllegalArgumentException("Parameter actionPlanId is required and cannot be null.");
        }
        return service.getActionPlanById(actionPlanId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanInstance> clientResponse = getActionPlanByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanInstance> getActionPlanByIdDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ActionPlanInstance, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ActionPlanInstance>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object deleteActionPlan(String actionPlanId) {
        return deleteActionPlanWithServiceResponseAsync(actionPlanId).toBlocking().single().body();
    }

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> deleteActionPlanAsync(String actionPlanId, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(deleteActionPlanWithServiceResponseAsync(actionPlanId), serviceCallback);
    }

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> deleteActionPlanAsync(String actionPlanId) {
        return deleteActionPlanWithServiceResponseAsync(actionPlanId).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> deleteActionPlanWithServiceResponseAsync(String actionPlanId) {
        if (actionPlanId == null) {
            throw new IllegalArgumentException("Parameter actionPlanId is required and cannot be null.");
        }
        return service.deleteActionPlan(actionPlanId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = deleteActionPlanDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> deleteActionPlanDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Object, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(204, new TypeToken<Object>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Remove an action plan objective.
     *
     * @param actionPlanId The instance of the plan that the objective belongs to.
     * @param objectiveId The instance of the objective to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object deleteActionPlanObjective(String actionPlanId, String objectiveId) {
        return deleteActionPlanObjectiveWithServiceResponseAsync(actionPlanId, objectiveId).toBlocking().single().body();
    }

    /**
     * Remove an action plan objective.
     *
     * @param actionPlanId The instance of the plan that the objective belongs to.
     * @param objectiveId The instance of the objective to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> deleteActionPlanObjectiveAsync(String actionPlanId, String objectiveId, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(deleteActionPlanObjectiveWithServiceResponseAsync(actionPlanId, objectiveId), serviceCallback);
    }

    /**
     * Remove an action plan objective.
     *
     * @param actionPlanId The instance of the plan that the objective belongs to.
     * @param objectiveId The instance of the objective to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> deleteActionPlanObjectiveAsync(String actionPlanId, String objectiveId) {
        return deleteActionPlanObjectiveWithServiceResponseAsync(actionPlanId, objectiveId).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Remove an action plan objective.
     *
     * @param actionPlanId The instance of the plan that the objective belongs to.
     * @param objectiveId The instance of the objective to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> deleteActionPlanObjectiveWithServiceResponseAsync(String actionPlanId, String objectiveId) {
        if (actionPlanId == null) {
            throw new IllegalArgumentException("Parameter actionPlanId is required and cannot be null.");
        }
        if (objectiveId == null) {
            throw new IllegalArgumentException("Parameter objectiveId is required and cannot be null.");
        }
        return service.deleteActionPlanObjective(actionPlanId, objectiveId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = deleteActionPlanObjectiveDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> deleteActionPlanObjectiveDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Object, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(204, new TypeToken<Object>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanAdherenceSummary object if successful.
     */
    public ActionPlanAdherenceSummary getActionPlanAdherence(DateTime startTime, DateTime endTime, String actionPlanId) {
        return getActionPlanAdherenceWithServiceResponseAsync(startTime, endTime, actionPlanId).toBlocking().single().body();
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanAdherenceSummary> getActionPlanAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId, final ServiceCallback<ActionPlanAdherenceSummary> serviceCallback) {
        return ServiceFuture.fromResponse(getActionPlanAdherenceWithServiceResponseAsync(startTime, endTime, actionPlanId), serviceCallback);
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    public Observable<ActionPlanAdherenceSummary> getActionPlanAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId) {
        return getActionPlanAdherenceWithServiceResponseAsync(startTime, endTime, actionPlanId).map(new Func1<ServiceResponse<ActionPlanAdherenceSummary>, ActionPlanAdherenceSummary>() {
            @Override
            public ActionPlanAdherenceSummary call(ServiceResponse<ActionPlanAdherenceSummary> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    public Observable<ServiceResponse<ActionPlanAdherenceSummary>> getActionPlanAdherenceWithServiceResponseAsync(DateTime startTime, DateTime endTime, String actionPlanId) {
        if (startTime == null) {
            throw new IllegalArgumentException("Parameter startTime is required and cannot be null.");
        }
        if (endTime == null) {
            throw new IllegalArgumentException("Parameter endTime is required and cannot be null.");
        }
        if (actionPlanId == null) {
            throw new IllegalArgumentException("Parameter actionPlanId is required and cannot be null.");
        }
        final String objectiveId = null;
        final String taskId = null;
        return service.getActionPlanAdherence(actionPlanId, startTime, endTime, objectiveId, taskId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanAdherenceSummary>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanAdherenceSummary>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanAdherenceSummary> clientResponse = getActionPlanAdherenceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanAdherenceSummary object if successful.
     */
    public ActionPlanAdherenceSummary getActionPlanAdherence(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId) {
        return getActionPlanAdherenceWithServiceResponseAsync(startTime, endTime, actionPlanId, objectiveId, taskId).toBlocking().single().body();
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanAdherenceSummary> getActionPlanAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId, final ServiceCallback<ActionPlanAdherenceSummary> serviceCallback) {
        return ServiceFuture.fromResponse(getActionPlanAdherenceWithServiceResponseAsync(startTime, endTime, actionPlanId, objectiveId, taskId), serviceCallback);
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    public Observable<ActionPlanAdherenceSummary> getActionPlanAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId) {
        return getActionPlanAdherenceWithServiceResponseAsync(startTime, endTime, actionPlanId, objectiveId, taskId).map(new Func1<ServiceResponse<ActionPlanAdherenceSummary>, ActionPlanAdherenceSummary>() {
            @Override
            public ActionPlanAdherenceSummary call(ServiceResponse<ActionPlanAdherenceSummary> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    public Observable<ServiceResponse<ActionPlanAdherenceSummary>> getActionPlanAdherenceWithServiceResponseAsync(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId) {
        if (startTime == null) {
            throw new IllegalArgumentException("Parameter startTime is required and cannot be null.");
        }
        if (endTime == null) {
            throw new IllegalArgumentException("Parameter endTime is required and cannot be null.");
        }
        if (actionPlanId == null) {
            throw new IllegalArgumentException("Parameter actionPlanId is required and cannot be null.");
        }
        return service.getActionPlanAdherence(actionPlanId, startTime, endTime, objectiveId, taskId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanAdherenceSummary>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanAdherenceSummary>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanAdherenceSummary> clientResponse = getActionPlanAdherenceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanAdherenceSummary> getActionPlanAdherenceDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ActionPlanAdherenceSummary, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ActionPlanAdherenceSummary>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Get a collection of task definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTasksResponseActionPlanTaskInstance object if successful.
     */
    public ActionPlanTasksResponseActionPlanTaskInstance getActionPlanTasks() {
        return getActionPlanTasksWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get a collection of task definitions.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTasksResponseActionPlanTaskInstance> getActionPlanTasksAsync(final ServiceCallback<ActionPlanTasksResponseActionPlanTaskInstance> serviceCallback) {
        return ServiceFuture.fromResponse(getActionPlanTasksWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get a collection of task definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    public Observable<ActionPlanTasksResponseActionPlanTaskInstance> getActionPlanTasksAsync() {
        return getActionPlanTasksWithServiceResponseAsync().map(new Func1<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>, ActionPlanTasksResponseActionPlanTaskInstance>() {
            @Override
            public ActionPlanTasksResponseActionPlanTaskInstance call(ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a collection of task definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    public Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> getActionPlanTasksWithServiceResponseAsync() {
        final String actionPlanTaskStatus = null;
        final Integer maxPageSize = null;
        return service.getActionPlanTasks(actionPlanTaskStatus, maxPageSize)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> clientResponse = getActionPlanTasksDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTasksResponseActionPlanTaskInstance object if successful.
     */
    public ActionPlanTasksResponseActionPlanTaskInstance getActionPlanTasks(String actionPlanTaskStatus, Integer maxPageSize) {
        return getActionPlanTasksWithServiceResponseAsync(actionPlanTaskStatus, maxPageSize).toBlocking().single().body();
    }

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTasksResponseActionPlanTaskInstance> getActionPlanTasksAsync(String actionPlanTaskStatus, Integer maxPageSize, final ServiceCallback<ActionPlanTasksResponseActionPlanTaskInstance> serviceCallback) {
        return ServiceFuture.fromResponse(getActionPlanTasksWithServiceResponseAsync(actionPlanTaskStatus, maxPageSize), serviceCallback);
    }

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    public Observable<ActionPlanTasksResponseActionPlanTaskInstance> getActionPlanTasksAsync(String actionPlanTaskStatus, Integer maxPageSize) {
        return getActionPlanTasksWithServiceResponseAsync(actionPlanTaskStatus, maxPageSize).map(new Func1<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>, ActionPlanTasksResponseActionPlanTaskInstance>() {
            @Override
            public ActionPlanTasksResponseActionPlanTaskInstance call(ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    public Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> getActionPlanTasksWithServiceResponseAsync(String actionPlanTaskStatus, Integer maxPageSize) {
        return service.getActionPlanTasks(actionPlanTaskStatus, maxPageSize)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> clientResponse = getActionPlanTasksDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> getActionPlanTasksDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException {
        return this.restClient().responseBuilderFactory().<ActionPlanTasksResponseActionPlanTaskInstance, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ActionPlanTasksResponseActionPlanTaskInstance>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTasksResponseActionPlanTaskInstance object if successful.
     */
    public ActionPlanTasksResponseActionPlanTaskInstance putActionPlanTasks(ActionPlanTaskInstance actionPlanTask) {
        return putActionPlanTasksWithServiceResponseAsync(actionPlanTask).toBlocking().single().body();
    }

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTasksResponseActionPlanTaskInstance> putActionPlanTasksAsync(ActionPlanTaskInstance actionPlanTask, final ServiceCallback<ActionPlanTasksResponseActionPlanTaskInstance> serviceCallback) {
        return ServiceFuture.fromResponse(putActionPlanTasksWithServiceResponseAsync(actionPlanTask), serviceCallback);
    }

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    public Observable<ActionPlanTasksResponseActionPlanTaskInstance> putActionPlanTasksAsync(ActionPlanTaskInstance actionPlanTask) {
        return putActionPlanTasksWithServiceResponseAsync(actionPlanTask).map(new Func1<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>, ActionPlanTasksResponseActionPlanTaskInstance>() {
            @Override
            public ActionPlanTasksResponseActionPlanTaskInstance call(ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    public Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> putActionPlanTasksWithServiceResponseAsync(ActionPlanTaskInstance actionPlanTask) {
        if (actionPlanTask == null) {
            throw new IllegalArgumentException("Parameter actionPlanTask is required and cannot be null.");
        }
        Validator.validate(actionPlanTask);
        return service.putActionPlanTasks(actionPlanTask)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> clientResponse = putActionPlanTasksDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> putActionPlanTasksDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ActionPlanTasksResponseActionPlanTaskInstance, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ActionPlanTasksResponseActionPlanTaskInstance>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask the ActionPlanTask value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object postActionPlanTasks(ActionPlanTask actionPlanTask) {
        return postActionPlanTasksWithServiceResponseAsync(actionPlanTask).toBlocking().single().body();
    }

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask the ActionPlanTask value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> postActionPlanTasksAsync(ActionPlanTask actionPlanTask, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(postActionPlanTasksWithServiceResponseAsync(actionPlanTask), serviceCallback);
    }

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask the ActionPlanTask value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> postActionPlanTasksAsync(ActionPlanTask actionPlanTask) {
        return postActionPlanTasksWithServiceResponseAsync(actionPlanTask).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask the ActionPlanTask value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> postActionPlanTasksWithServiceResponseAsync(ActionPlanTask actionPlanTask) {
        if (actionPlanTask == null) {
            throw new IllegalArgumentException("Parameter actionPlanTask is required and cannot be null.");
        }
        Validator.validate(actionPlanTask);
        return service.postActionPlanTasks(actionPlanTask)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = postActionPlanTasksDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> postActionPlanTasksDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Object, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(201, new TypeToken<ActionPlanTasksResponseActionPlanTaskInstance>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTasksResponseActionPlanTaskInstance object if successful.
     */
    public ActionPlanTasksResponseActionPlanTaskInstance patchActionPlanTasks(ActionPlanTaskInstance actionPlanTask) {
        return patchActionPlanTasksWithServiceResponseAsync(actionPlanTask).toBlocking().single().body();
    }

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTasksResponseActionPlanTaskInstance> patchActionPlanTasksAsync(ActionPlanTaskInstance actionPlanTask, final ServiceCallback<ActionPlanTasksResponseActionPlanTaskInstance> serviceCallback) {
        return ServiceFuture.fromResponse(patchActionPlanTasksWithServiceResponseAsync(actionPlanTask), serviceCallback);
    }

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    public Observable<ActionPlanTasksResponseActionPlanTaskInstance> patchActionPlanTasksAsync(ActionPlanTaskInstance actionPlanTask) {
        return patchActionPlanTasksWithServiceResponseAsync(actionPlanTask).map(new Func1<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>, ActionPlanTasksResponseActionPlanTaskInstance>() {
            @Override
            public ActionPlanTasksResponseActionPlanTaskInstance call(ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    public Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> patchActionPlanTasksWithServiceResponseAsync(ActionPlanTaskInstance actionPlanTask) {
        if (actionPlanTask == null) {
            throw new IllegalArgumentException("Parameter actionPlanTask is required and cannot be null.");
        }
        Validator.validate(actionPlanTask);
        return service.patchActionPlanTasks(actionPlanTask)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> clientResponse = patchActionPlanTasksDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance> patchActionPlanTasksDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ActionPlanTasksResponseActionPlanTaskInstance, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ActionPlanTasksResponseActionPlanTaskInstance>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskInstance object if successful.
     */
    public ActionPlanTaskInstance getActionPlanTaskById(String actionPlanTaskId) {
        return getActionPlanTaskByIdWithServiceResponseAsync(actionPlanTaskId).toBlocking().single().body();
    }

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTaskInstance> getActionPlanTaskByIdAsync(String actionPlanTaskId, final ServiceCallback<ActionPlanTaskInstance> serviceCallback) {
        return ServiceFuture.fromResponse(getActionPlanTaskByIdWithServiceResponseAsync(actionPlanTaskId), serviceCallback);
    }

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    public Observable<ActionPlanTaskInstance> getActionPlanTaskByIdAsync(String actionPlanTaskId) {
        return getActionPlanTaskByIdWithServiceResponseAsync(actionPlanTaskId).map(new Func1<ServiceResponse<ActionPlanTaskInstance>, ActionPlanTaskInstance>() {
            @Override
            public ActionPlanTaskInstance call(ServiceResponse<ActionPlanTaskInstance> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    public Observable<ServiceResponse<ActionPlanTaskInstance>> getActionPlanTaskByIdWithServiceResponseAsync(String actionPlanTaskId) {
        if (actionPlanTaskId == null) {
            throw new IllegalArgumentException("Parameter actionPlanTaskId is required and cannot be null.");
        }
        return service.getActionPlanTaskById(actionPlanTaskId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTaskInstance>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTaskInstance>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTaskInstance> clientResponse = getActionPlanTaskByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanTaskInstance> getActionPlanTaskByIdDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ActionPlanTaskInstance, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ActionPlanTaskInstance>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object deleteActionPlanTaskById(String actionPlanTaskId) {
        return deleteActionPlanTaskByIdWithServiceResponseAsync(actionPlanTaskId).toBlocking().single().body();
    }

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> deleteActionPlanTaskByIdAsync(String actionPlanTaskId, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(deleteActionPlanTaskByIdWithServiceResponseAsync(actionPlanTaskId), serviceCallback);
    }

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> deleteActionPlanTaskByIdAsync(String actionPlanTaskId) {
        return deleteActionPlanTaskByIdWithServiceResponseAsync(actionPlanTaskId).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> deleteActionPlanTaskByIdWithServiceResponseAsync(String actionPlanTaskId) {
        if (actionPlanTaskId == null) {
            throw new IllegalArgumentException("Parameter actionPlanTaskId is required and cannot be null.");
        }
        return service.deleteActionPlanTaskById(actionPlanTaskId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = deleteActionPlanTaskByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> deleteActionPlanTaskByIdDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Object, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(204, new TypeToken<Object>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     *
     * @param trackingValidation the TrackingValidation value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskTrackingResponseActionPlanTaskTracking object if successful.
     */
    public ActionPlanTaskTrackingResponseActionPlanTaskTracking validateActionPlanTasksTracking(TrackingValidation trackingValidation) {
        return validateActionPlanTasksTrackingWithServiceResponseAsync(trackingValidation).toBlocking().single().body();
    }

    /**
     *
     * @param trackingValidation the TrackingValidation value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanTaskTrackingResponseActionPlanTaskTracking> validateActionPlanTasksTrackingAsync(TrackingValidation trackingValidation, final ServiceCallback<ActionPlanTaskTrackingResponseActionPlanTaskTracking> serviceCallback) {
        return ServiceFuture.fromResponse(validateActionPlanTasksTrackingWithServiceResponseAsync(trackingValidation), serviceCallback);
    }

    /**
     *
     * @param trackingValidation the TrackingValidation value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskTrackingResponseActionPlanTaskTracking object
     */
    public Observable<ActionPlanTaskTrackingResponseActionPlanTaskTracking> validateActionPlanTasksTrackingAsync(TrackingValidation trackingValidation) {
        return validateActionPlanTasksTrackingWithServiceResponseAsync(trackingValidation).map(new Func1<ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking>, ActionPlanTaskTrackingResponseActionPlanTaskTracking>() {
            @Override
            public ActionPlanTaskTrackingResponseActionPlanTaskTracking call(ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking> response) {
                return response.body();
            }
        });
    }

    /**
     *
     * @param trackingValidation the TrackingValidation value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskTrackingResponseActionPlanTaskTracking object
     */
    public Observable<ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking>> validateActionPlanTasksTrackingWithServiceResponseAsync(TrackingValidation trackingValidation) {
        if (trackingValidation == null) {
            throw new IllegalArgumentException("Parameter trackingValidation is required and cannot be null.");
        }
        Validator.validate(trackingValidation);
        return service.validateActionPlanTasksTracking(trackingValidation)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking> clientResponse = validateActionPlanTasksTrackingDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking> validateActionPlanTasksTrackingDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<ActionPlanTaskTrackingResponseActionPlanTaskTracking, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<ActionPlanTaskTrackingResponseActionPlanTaskTracking>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Get a collection of all goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    public GoalsResponse getGoals() {
        return getGoalsWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get a collection of all goals.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GoalsResponse> getGoalsAsync(final ServiceCallback<GoalsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getGoalsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get a collection of all goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    public Observable<GoalsResponse> getGoalsAsync() {
        return getGoalsWithServiceResponseAsync().map(new Func1<ServiceResponse<GoalsResponse>, GoalsResponse>() {
            @Override
            public GoalsResponse call(ServiceResponse<GoalsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a collection of all goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    public Observable<ServiceResponse<GoalsResponse>> getGoalsWithServiceResponseAsync() {
        final String types = null;
        final String windowTypes = null;
        final DateTime startDate = null;
        final DateTime endDate = null;
        return service.getGoals(types, windowTypes, startDate, endDate)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GoalsResponse>>>() {
                @Override
                public Observable<ServiceResponse<GoalsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GoalsResponse> clientResponse = getGoalsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get a collection of all goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param startDate The start date for date range filter.
     * @param endDate The end date for date range filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    public GoalsResponse getGoals(String types, String windowTypes, DateTime startDate, DateTime endDate) {
        return getGoalsWithServiceResponseAsync(types, windowTypes, startDate, endDate).toBlocking().single().body();
    }

    /**
     * Get a collection of all goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param startDate The start date for date range filter.
     * @param endDate The end date for date range filter.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GoalsResponse> getGoalsAsync(String types, String windowTypes, DateTime startDate, DateTime endDate, final ServiceCallback<GoalsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getGoalsWithServiceResponseAsync(types, windowTypes, startDate, endDate), serviceCallback);
    }

    /**
     * Get a collection of all goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param startDate The start date for date range filter.
     * @param endDate The end date for date range filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    public Observable<GoalsResponse> getGoalsAsync(String types, String windowTypes, DateTime startDate, DateTime endDate) {
        return getGoalsWithServiceResponseAsync(types, windowTypes, startDate, endDate).map(new Func1<ServiceResponse<GoalsResponse>, GoalsResponse>() {
            @Override
            public GoalsResponse call(ServiceResponse<GoalsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a collection of all goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param startDate The start date for date range filter.
     * @param endDate The end date for date range filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    public Observable<ServiceResponse<GoalsResponse>> getGoalsWithServiceResponseAsync(String types, String windowTypes, DateTime startDate, DateTime endDate) {
        return service.getGoals(types, windowTypes, startDate, endDate)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GoalsResponse>>>() {
                @Override
                public Observable<ServiceResponse<GoalsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GoalsResponse> clientResponse = getGoalsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GoalsResponse> getGoalsDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException {
        return this.restClient().responseBuilderFactory().<GoalsResponse, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<GoalsResponse>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Update/Replace a complete goal instance with no merge.
     *
     * @param goal The instance of the goal to update. The entire goal will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Goal object if successful.
     */
    public Goal putGoal(Goal goal) {
        return putGoalWithServiceResponseAsync(goal).toBlocking().single().body();
    }

    /**
     * Update/Replace a complete goal instance with no merge.
     *
     * @param goal The instance of the goal to update. The entire goal will be replaced with this version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Goal> putGoalAsync(Goal goal, final ServiceCallback<Goal> serviceCallback) {
        return ServiceFuture.fromResponse(putGoalWithServiceResponseAsync(goal), serviceCallback);
    }

    /**
     * Update/Replace a complete goal instance with no merge.
     *
     * @param goal The instance of the goal to update. The entire goal will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Goal object
     */
    public Observable<Goal> putGoalAsync(Goal goal) {
        return putGoalWithServiceResponseAsync(goal).map(new Func1<ServiceResponse<Goal>, Goal>() {
            @Override
            public Goal call(ServiceResponse<Goal> response) {
                return response.body();
            }
        });
    }

    /**
     * Update/Replace a complete goal instance with no merge.
     *
     * @param goal The instance of the goal to update. The entire goal will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Goal object
     */
    public Observable<ServiceResponse<Goal>> putGoalWithServiceResponseAsync(Goal goal) {
        if (goal == null) {
            throw new IllegalArgumentException("Parameter goal is required and cannot be null.");
        }
        Validator.validate(goal);
        return service.putGoal(goal)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Goal>>>() {
                @Override
                public Observable<ServiceResponse<Goal>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Goal> clientResponse = putGoalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Goal> putGoalDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Goal, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Goal>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Post a collection of goal instances.
     *
     * @param goalsWrapper The collection of goal instances to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object createGoals(GoalsWrapper goalsWrapper) {
        return createGoalsWithServiceResponseAsync(goalsWrapper).toBlocking().single().body();
    }

    /**
     * Post a collection of goal instances.
     *
     * @param goalsWrapper The collection of goal instances to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> createGoalsAsync(GoalsWrapper goalsWrapper, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(createGoalsWithServiceResponseAsync(goalsWrapper), serviceCallback);
    }

    /**
     * Post a collection of goal instances.
     *
     * @param goalsWrapper The collection of goal instances to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> createGoalsAsync(GoalsWrapper goalsWrapper) {
        return createGoalsWithServiceResponseAsync(goalsWrapper).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Post a collection of goal instances.
     *
     * @param goalsWrapper The collection of goal instances to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> createGoalsWithServiceResponseAsync(GoalsWrapper goalsWrapper) {
        if (goalsWrapper == null) {
            throw new IllegalArgumentException("Parameter goalsWrapper is required and cannot be null.");
        }
        Validator.validate(goalsWrapper);
        return service.createGoals(goalsWrapper)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = createGoalsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> createGoalsDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Object, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(201, new TypeToken<GoalsResponse>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Update collection of goal instances with merge.
     *
     * @param goalsWrapper The collection of goal instances to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    public GoalsResponse patchGoals(GoalsWrapper goalsWrapper) {
        return patchGoalsWithServiceResponseAsync(goalsWrapper).toBlocking().single().body();
    }

    /**
     * Update collection of goal instances with merge.
     *
     * @param goalsWrapper The collection of goal instances to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GoalsResponse> patchGoalsAsync(GoalsWrapper goalsWrapper, final ServiceCallback<GoalsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(patchGoalsWithServiceResponseAsync(goalsWrapper), serviceCallback);
    }

    /**
     * Update collection of goal instances with merge.
     *
     * @param goalsWrapper The collection of goal instances to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    public Observable<GoalsResponse> patchGoalsAsync(GoalsWrapper goalsWrapper) {
        return patchGoalsWithServiceResponseAsync(goalsWrapper).map(new Func1<ServiceResponse<GoalsResponse>, GoalsResponse>() {
            @Override
            public GoalsResponse call(ServiceResponse<GoalsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Update collection of goal instances with merge.
     *
     * @param goalsWrapper The collection of goal instances to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    public Observable<ServiceResponse<GoalsResponse>> patchGoalsWithServiceResponseAsync(GoalsWrapper goalsWrapper) {
        if (goalsWrapper == null) {
            throw new IllegalArgumentException("Parameter goalsWrapper is required and cannot be null.");
        }
        Validator.validate(goalsWrapper);
        return service.patchGoals(goalsWrapper)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GoalsResponse>>>() {
                @Override
                public Observable<ServiceResponse<GoalsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GoalsResponse> clientResponse = patchGoalsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GoalsResponse> patchGoalsDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<GoalsResponse, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<GoalsResponse>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Get an instance of a specific goal.
     *
     * @param goalId The goal identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Goal object if successful.
     */
    public Goal getGoalById(String goalId) {
        return getGoalByIdWithServiceResponseAsync(goalId).toBlocking().single().body();
    }

    /**
     * Get an instance of a specific goal.
     *
     * @param goalId The goal identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Goal> getGoalByIdAsync(String goalId, final ServiceCallback<Goal> serviceCallback) {
        return ServiceFuture.fromResponse(getGoalByIdWithServiceResponseAsync(goalId), serviceCallback);
    }

    /**
     * Get an instance of a specific goal.
     *
     * @param goalId The goal identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Goal object
     */
    public Observable<Goal> getGoalByIdAsync(String goalId) {
        return getGoalByIdWithServiceResponseAsync(goalId).map(new Func1<ServiceResponse<Goal>, Goal>() {
            @Override
            public Goal call(ServiceResponse<Goal> response) {
                return response.body();
            }
        });
    }

    /**
     * Get an instance of a specific goal.
     *
     * @param goalId The goal identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Goal object
     */
    public Observable<ServiceResponse<Goal>> getGoalByIdWithServiceResponseAsync(String goalId) {
        if (goalId == null) {
            throw new IllegalArgumentException("Parameter goalId is required and cannot be null.");
        }
        return service.getGoalById(goalId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Goal>>>() {
                @Override
                public Observable<ServiceResponse<Goal>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Goal> clientResponse = getGoalByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Goal> getGoalByIdDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Goal, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Goal>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete a goal instance.
     *
     * @param goalId The identifier of the goal to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object deleteGoal(String goalId) {
        return deleteGoalWithServiceResponseAsync(goalId).toBlocking().single().body();
    }

    /**
     * Delete a goal instance.
     *
     * @param goalId The identifier of the goal to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> deleteGoalAsync(String goalId, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(deleteGoalWithServiceResponseAsync(goalId), serviceCallback);
    }

    /**
     * Delete a goal instance.
     *
     * @param goalId The identifier of the goal to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> deleteGoalAsync(String goalId) {
        return deleteGoalWithServiceResponseAsync(goalId).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a goal instance.
     *
     * @param goalId The identifier of the goal to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> deleteGoalWithServiceResponseAsync(String goalId) {
        if (goalId == null) {
            throw new IllegalArgumentException("Parameter goalId is required and cannot be null.");
        }
        return service.deleteGoal(goalId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = deleteGoalDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> deleteGoalDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Object, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(204, new TypeToken<Object>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Get a collection of the active goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    public GoalsResponse getActiveGoals() {
        return getActiveGoalsWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get a collection of the active goals.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GoalsResponse> getActiveGoalsAsync(final ServiceCallback<GoalsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getActiveGoalsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get a collection of the active goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    public Observable<GoalsResponse> getActiveGoalsAsync() {
        return getActiveGoalsWithServiceResponseAsync().map(new Func1<ServiceResponse<GoalsResponse>, GoalsResponse>() {
            @Override
            public GoalsResponse call(ServiceResponse<GoalsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a collection of the active goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    public Observable<ServiceResponse<GoalsResponse>> getActiveGoalsWithServiceResponseAsync() {
        final String types = null;
        final String windowTypes = null;
        return service.getActiveGoals(types, windowTypes)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GoalsResponse>>>() {
                @Override
                public Observable<ServiceResponse<GoalsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GoalsResponse> clientResponse = getActiveGoalsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get a collection of the active goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    public GoalsResponse getActiveGoals(String types, String windowTypes) {
        return getActiveGoalsWithServiceResponseAsync(types, windowTypes).toBlocking().single().body();
    }

    /**
     * Get a collection of the active goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<GoalsResponse> getActiveGoalsAsync(String types, String windowTypes, final ServiceCallback<GoalsResponse> serviceCallback) {
        return ServiceFuture.fromResponse(getActiveGoalsWithServiceResponseAsync(types, windowTypes), serviceCallback);
    }

    /**
     * Get a collection of the active goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    public Observable<GoalsResponse> getActiveGoalsAsync(String types, String windowTypes) {
        return getActiveGoalsWithServiceResponseAsync(types, windowTypes).map(new Func1<ServiceResponse<GoalsResponse>, GoalsResponse>() {
            @Override
            public GoalsResponse call(ServiceResponse<GoalsResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a collection of the active goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    public Observable<ServiceResponse<GoalsResponse>> getActiveGoalsWithServiceResponseAsync(String types, String windowTypes) {
        return service.getActiveGoals(types, windowTypes)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<GoalsResponse>>>() {
                @Override
                public Observable<ServiceResponse<GoalsResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<GoalsResponse> clientResponse = getActiveGoalsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<GoalsResponse> getActiveGoalsDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException {
        return this.restClient().responseBuilderFactory().<GoalsResponse, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<GoalsResponse>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

    /**
     * Onboard a user.
     *
     * @param onboardingRequest The meta data associated with an onboarding request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OnboardingResponse object if successful.
     */
    public OnboardingResponse generateInviteCode(OnboardingRequest onboardingRequest) {
        return generateInviteCodeWithServiceResponseAsync(onboardingRequest).toBlocking().single().body();
    }

    /**
     * Onboard a user.
     *
     * @param onboardingRequest The meta data associated with an onboarding request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<OnboardingResponse> generateInviteCodeAsync(OnboardingRequest onboardingRequest, final ServiceCallback<OnboardingResponse> serviceCallback) {
        return ServiceFuture.fromResponse(generateInviteCodeWithServiceResponseAsync(onboardingRequest), serviceCallback);
    }

    /**
     * Onboard a user.
     *
     * @param onboardingRequest The meta data associated with an onboarding request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OnboardingResponse object
     */
    public Observable<OnboardingResponse> generateInviteCodeAsync(OnboardingRequest onboardingRequest) {
        return generateInviteCodeWithServiceResponseAsync(onboardingRequest).map(new Func1<ServiceResponse<OnboardingResponse>, OnboardingResponse>() {
            @Override
            public OnboardingResponse call(ServiceResponse<OnboardingResponse> response) {
                return response.body();
            }
        });
    }

    /**
     * Onboard a user.
     *
     * @param onboardingRequest The meta data associated with an onboarding request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OnboardingResponse object
     */
    public Observable<ServiceResponse<OnboardingResponse>> generateInviteCodeWithServiceResponseAsync(OnboardingRequest onboardingRequest) {
        if (onboardingRequest == null) {
            throw new IllegalArgumentException("Parameter onboardingRequest is required and cannot be null.");
        }
        Validator.validate(onboardingRequest);
        return service.generateInviteCode(onboardingRequest)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<OnboardingResponse>>>() {
                @Override
                public Observable<ServiceResponse<OnboardingResponse>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<OnboardingResponse> clientResponse = generateInviteCodeDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<OnboardingResponse> generateInviteCodeDelegate(Response<ResponseBody> response) throws MicrosoftKhronosCloudCommonErrorsErrorResponseException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<OnboardingResponse, MicrosoftKhronosCloudCommonErrorsErrorResponseException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<OnboardingResponse>() { }.getType())
                .registerError(MicrosoftKhronosCloudCommonErrorsErrorResponseException.class)
                .build(response);
    }

}
