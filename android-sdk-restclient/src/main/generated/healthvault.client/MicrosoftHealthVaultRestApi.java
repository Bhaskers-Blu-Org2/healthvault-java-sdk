/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package healthvault.client;

import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import healthvault.client.models.ActionPlan;
import healthvault.client.models.ActionPlanAdherenceSummary;
import healthvault.client.models.ActionPlanInstance;
import healthvault.client.models.ActionPlansResponseActionPlanInstance;
import healthvault.client.models.ActionPlanTask;
import healthvault.client.models.ActionPlanTaskInstance;
import healthvault.client.models.ActionPlanTasksResponseActionPlanTaskInstance;
import healthvault.client.models.ActionPlanTaskTrackingResponseActionPlanTaskTracking;
import healthvault.client.models.Goal;
import healthvault.client.models.GoalsResponse;
import healthvault.client.models.GoalsWrapper;
import healthvault.client.models.MicrosoftKhronosCloudCommonErrorsErrorResponseException;
import healthvault.client.models.OnboardingRequest;
import healthvault.client.models.OnboardingResponse;
import healthvault.client.models.TrackingValidation;
import java.io.IOException;
import org.joda.time.DateTime;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for MicrosoftHealthVaultRestApi class.
 */
public interface MicrosoftHealthVaultRestApi {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "https://data.ppe.microsofthealth.net/";

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstance object if successful.
     */
    ActionPlansResponseActionPlanInstance getActionPlans();

    /**
     * Get a collection of action plans.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlansResponseActionPlanInstance> getActionPlansAsync(final ServiceCallback<ActionPlansResponseActionPlanInstance> serviceCallback);

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    Observable<ActionPlansResponseActionPlanInstance> getActionPlansAsync();

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> getActionPlansWithServiceResponseAsync();
    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstance object if successful.
     */
    ActionPlansResponseActionPlanInstance getActionPlans(Integer maxPageSize);

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlansResponseActionPlanInstance> getActionPlansAsync(Integer maxPageSize, final ServiceCallback<ActionPlansResponseActionPlanInstance> serviceCallback);

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    Observable<ActionPlansResponseActionPlanInstance> getActionPlansAsync(Integer maxPageSize);

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> getActionPlansWithServiceResponseAsync(Integer maxPageSize);

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstance object if successful.
     */
    ActionPlansResponseActionPlanInstance putActionPlan(ActionPlanInstance actionPlan);

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlansResponseActionPlanInstance> putActionPlanAsync(ActionPlanInstance actionPlan, final ServiceCallback<ActionPlansResponseActionPlanInstance> serviceCallback);

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    Observable<ActionPlansResponseActionPlanInstance> putActionPlanAsync(ActionPlanInstance actionPlan);

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> putActionPlanWithServiceResponseAsync(ActionPlanInstance actionPlan);

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createActionPlan(ActionPlan actionPlan);

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createActionPlanAsync(ActionPlan actionPlan, final ServiceCallback<Object> serviceCallback);

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createActionPlanAsync(ActionPlan actionPlan);

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createActionPlanWithServiceResponseAsync(ActionPlan actionPlan);

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstance object if successful.
     */
    ActionPlansResponseActionPlanInstance patchActionPlan(ActionPlanInstance actionPlan);

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlansResponseActionPlanInstance> patchActionPlanAsync(ActionPlanInstance actionPlan, final ServiceCallback<ActionPlansResponseActionPlanInstance> serviceCallback);

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    Observable<ActionPlansResponseActionPlanInstance> patchActionPlanAsync(ActionPlanInstance actionPlan);

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstance object
     */
    Observable<ServiceResponse<ActionPlansResponseActionPlanInstance>> patchActionPlanWithServiceResponseAsync(ActionPlanInstance actionPlan);

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanInstance object if successful.
     */
    ActionPlanInstance getActionPlanById(String actionPlanId);

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanInstance> getActionPlanByIdAsync(String actionPlanId, final ServiceCallback<ActionPlanInstance> serviceCallback);

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstance object
     */
    Observable<ActionPlanInstance> getActionPlanByIdAsync(String actionPlanId);

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstance object
     */
    Observable<ServiceResponse<ActionPlanInstance>> getActionPlanByIdWithServiceResponseAsync(String actionPlanId);

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteActionPlan(String actionPlanId);

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteActionPlanAsync(String actionPlanId, final ServiceCallback<Object> serviceCallback);

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteActionPlanAsync(String actionPlanId);

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteActionPlanWithServiceResponseAsync(String actionPlanId);

    /**
     * Remove an action plan objective.
     *
     * @param actionPlanId The instance of the plan that the objective belongs to.
     * @param objectiveId The instance of the objective to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteActionPlanObjective(String actionPlanId, String objectiveId);

    /**
     * Remove an action plan objective.
     *
     * @param actionPlanId The instance of the plan that the objective belongs to.
     * @param objectiveId The instance of the objective to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteActionPlanObjectiveAsync(String actionPlanId, String objectiveId, final ServiceCallback<Object> serviceCallback);

    /**
     * Remove an action plan objective.
     *
     * @param actionPlanId The instance of the plan that the objective belongs to.
     * @param objectiveId The instance of the objective to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteActionPlanObjectiveAsync(String actionPlanId, String objectiveId);

    /**
     * Remove an action plan objective.
     *
     * @param actionPlanId The instance of the plan that the objective belongs to.
     * @param objectiveId The instance of the objective to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteActionPlanObjectiveWithServiceResponseAsync(String actionPlanId, String objectiveId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanAdherenceSummary object if successful.
     */
    ActionPlanAdherenceSummary getActionPlanAdherence(DateTime startTime, DateTime endTime, String actionPlanId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanAdherenceSummary> getActionPlanAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId, final ServiceCallback<ActionPlanAdherenceSummary> serviceCallback);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    Observable<ActionPlanAdherenceSummary> getActionPlanAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    Observable<ServiceResponse<ActionPlanAdherenceSummary>> getActionPlanAdherenceWithServiceResponseAsync(DateTime startTime, DateTime endTime, String actionPlanId);
    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanAdherenceSummary object if successful.
     */
    ActionPlanAdherenceSummary getActionPlanAdherence(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanAdherenceSummary> getActionPlanAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId, final ServiceCallback<ActionPlanAdherenceSummary> serviceCallback);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    Observable<ActionPlanAdherenceSummary> getActionPlanAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    Observable<ServiceResponse<ActionPlanAdherenceSummary>> getActionPlanAdherenceWithServiceResponseAsync(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId);

    /**
     * Get a collection of task definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTasksResponseActionPlanTaskInstance object if successful.
     */
    ActionPlanTasksResponseActionPlanTaskInstance getActionPlanTasks();

    /**
     * Get a collection of task definitions.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTasksResponseActionPlanTaskInstance> getActionPlanTasksAsync(final ServiceCallback<ActionPlanTasksResponseActionPlanTaskInstance> serviceCallback);

    /**
     * Get a collection of task definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    Observable<ActionPlanTasksResponseActionPlanTaskInstance> getActionPlanTasksAsync();

    /**
     * Get a collection of task definitions.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> getActionPlanTasksWithServiceResponseAsync();
    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTasksResponseActionPlanTaskInstance object if successful.
     */
    ActionPlanTasksResponseActionPlanTaskInstance getActionPlanTasks(String actionPlanTaskStatus, Integer maxPageSize);

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTasksResponseActionPlanTaskInstance> getActionPlanTasksAsync(String actionPlanTaskStatus, Integer maxPageSize, final ServiceCallback<ActionPlanTasksResponseActionPlanTaskInstance> serviceCallback);

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    Observable<ActionPlanTasksResponseActionPlanTaskInstance> getActionPlanTasksAsync(String actionPlanTaskStatus, Integer maxPageSize);

    /**
     * Get a collection of task definitions.
     *
     * @param actionPlanTaskStatus Possible values include: 'Unknown', 'Archived', 'InProgress', 'Recommended', 'Completed', 'Template'
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> getActionPlanTasksWithServiceResponseAsync(String actionPlanTaskStatus, Integer maxPageSize);

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTasksResponseActionPlanTaskInstance object if successful.
     */
    ActionPlanTasksResponseActionPlanTaskInstance putActionPlanTasks(ActionPlanTaskInstance actionPlanTask);

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTasksResponseActionPlanTaskInstance> putActionPlanTasksAsync(ActionPlanTaskInstance actionPlanTask, final ServiceCallback<ActionPlanTasksResponseActionPlanTaskInstance> serviceCallback);

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    Observable<ActionPlanTasksResponseActionPlanTaskInstance> putActionPlanTasksAsync(ActionPlanTaskInstance actionPlanTask);

    /**
     * Put an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> putActionPlanTasksWithServiceResponseAsync(ActionPlanTaskInstance actionPlanTask);

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask the ActionPlanTask value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object postActionPlanTasks(ActionPlanTask actionPlanTask);

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask the ActionPlanTask value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> postActionPlanTasksAsync(ActionPlanTask actionPlanTask, final ServiceCallback<Object> serviceCallback);

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask the ActionPlanTask value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> postActionPlanTasksAsync(ActionPlanTask actionPlanTask);

    /**
     * Post a new action plan task.
     *
     * @param actionPlanTask the ActionPlanTask value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> postActionPlanTasksWithServiceResponseAsync(ActionPlanTask actionPlanTask);

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTasksResponseActionPlanTaskInstance object if successful.
     */
    ActionPlanTasksResponseActionPlanTaskInstance patchActionPlanTasks(ActionPlanTaskInstance actionPlanTask);

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTasksResponseActionPlanTaskInstance> patchActionPlanTasksAsync(ActionPlanTaskInstance actionPlanTask, final ServiceCallback<ActionPlanTasksResponseActionPlanTaskInstance> serviceCallback);

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    Observable<ActionPlanTasksResponseActionPlanTaskInstance> patchActionPlanTasksAsync(ActionPlanTaskInstance actionPlanTask);

    /**
     * Patch an update for an action plan task.
     *
     * @param actionPlanTask the ActionPlanTaskInstance value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTasksResponseActionPlanTaskInstance object
     */
    Observable<ServiceResponse<ActionPlanTasksResponseActionPlanTaskInstance>> patchActionPlanTasksWithServiceResponseAsync(ActionPlanTaskInstance actionPlanTask);

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskInstance object if successful.
     */
    ActionPlanTaskInstance getActionPlanTaskById(String actionPlanTaskId);

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTaskInstance> getActionPlanTaskByIdAsync(String actionPlanTaskId, final ServiceCallback<ActionPlanTaskInstance> serviceCallback);

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    Observable<ActionPlanTaskInstance> getActionPlanTaskByIdAsync(String actionPlanTaskId);

    /**
     * Get a task by id.
     *
     * @param actionPlanTaskId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskInstance object
     */
    Observable<ServiceResponse<ActionPlanTaskInstance>> getActionPlanTaskByIdWithServiceResponseAsync(String actionPlanTaskId);

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteActionPlanTaskById(String actionPlanTaskId);

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteActionPlanTaskByIdAsync(String actionPlanTaskId, final ServiceCallback<Object> serviceCallback);

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteActionPlanTaskByIdAsync(String actionPlanTaskId);

    /**
     * Delete a task by id.
     *
     * @param actionPlanTaskId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteActionPlanTaskByIdWithServiceResponseAsync(String actionPlanTaskId);

    /**
     *
     * @param trackingValidation the TrackingValidation value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanTaskTrackingResponseActionPlanTaskTracking object if successful.
     */
    ActionPlanTaskTrackingResponseActionPlanTaskTracking validateActionPlanTasksTracking(TrackingValidation trackingValidation);

    /**
     *
     * @param trackingValidation the TrackingValidation value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanTaskTrackingResponseActionPlanTaskTracking> validateActionPlanTasksTrackingAsync(TrackingValidation trackingValidation, final ServiceCallback<ActionPlanTaskTrackingResponseActionPlanTaskTracking> serviceCallback);

    /**
     *
     * @param trackingValidation the TrackingValidation value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskTrackingResponseActionPlanTaskTracking object
     */
    Observable<ActionPlanTaskTrackingResponseActionPlanTaskTracking> validateActionPlanTasksTrackingAsync(TrackingValidation trackingValidation);

    /**
     *
     * @param trackingValidation the TrackingValidation value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanTaskTrackingResponseActionPlanTaskTracking object
     */
    Observable<ServiceResponse<ActionPlanTaskTrackingResponseActionPlanTaskTracking>> validateActionPlanTasksTrackingWithServiceResponseAsync(TrackingValidation trackingValidation);

    /**
     * Get a collection of all goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    GoalsResponse getGoals();

    /**
     * Get a collection of all goals.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GoalsResponse> getGoalsAsync(final ServiceCallback<GoalsResponse> serviceCallback);

    /**
     * Get a collection of all goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<GoalsResponse> getGoalsAsync();

    /**
     * Get a collection of all goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<ServiceResponse<GoalsResponse>> getGoalsWithServiceResponseAsync();
    /**
     * Get a collection of all goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param startDate The start date for date range filter.
     * @param endDate The end date for date range filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    GoalsResponse getGoals(String types, String windowTypes, DateTime startDate, DateTime endDate);

    /**
     * Get a collection of all goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param startDate The start date for date range filter.
     * @param endDate The end date for date range filter.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GoalsResponse> getGoalsAsync(String types, String windowTypes, DateTime startDate, DateTime endDate, final ServiceCallback<GoalsResponse> serviceCallback);

    /**
     * Get a collection of all goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param startDate The start date for date range filter.
     * @param endDate The end date for date range filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<GoalsResponse> getGoalsAsync(String types, String windowTypes, DateTime startDate, DateTime endDate);

    /**
     * Get a collection of all goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param startDate The start date for date range filter.
     * @param endDate The end date for date range filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<ServiceResponse<GoalsResponse>> getGoalsWithServiceResponseAsync(String types, String windowTypes, DateTime startDate, DateTime endDate);

    /**
     * Update/Replace a complete goal instance with no merge.
     *
     * @param goal The instance of the goal to update. The entire goal will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Goal object if successful.
     */
    Goal putGoal(Goal goal);

    /**
     * Update/Replace a complete goal instance with no merge.
     *
     * @param goal The instance of the goal to update. The entire goal will be replaced with this version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Goal> putGoalAsync(Goal goal, final ServiceCallback<Goal> serviceCallback);

    /**
     * Update/Replace a complete goal instance with no merge.
     *
     * @param goal The instance of the goal to update. The entire goal will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Goal object
     */
    Observable<Goal> putGoalAsync(Goal goal);

    /**
     * Update/Replace a complete goal instance with no merge.
     *
     * @param goal The instance of the goal to update. The entire goal will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Goal object
     */
    Observable<ServiceResponse<Goal>> putGoalWithServiceResponseAsync(Goal goal);

    /**
     * Post a collection of goal instances.
     *
     * @param goalsWrapper The collection of goal instances to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object createGoals(GoalsWrapper goalsWrapper);

    /**
     * Post a collection of goal instances.
     *
     * @param goalsWrapper The collection of goal instances to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createGoalsAsync(GoalsWrapper goalsWrapper, final ServiceCallback<Object> serviceCallback);

    /**
     * Post a collection of goal instances.
     *
     * @param goalsWrapper The collection of goal instances to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createGoalsAsync(GoalsWrapper goalsWrapper);

    /**
     * Post a collection of goal instances.
     *
     * @param goalsWrapper The collection of goal instances to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createGoalsWithServiceResponseAsync(GoalsWrapper goalsWrapper);

    /**
     * Update collection of goal instances with merge.
     *
     * @param goalsWrapper The collection of goal instances to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    GoalsResponse patchGoals(GoalsWrapper goalsWrapper);

    /**
     * Update collection of goal instances with merge.
     *
     * @param goalsWrapper The collection of goal instances to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GoalsResponse> patchGoalsAsync(GoalsWrapper goalsWrapper, final ServiceCallback<GoalsResponse> serviceCallback);

    /**
     * Update collection of goal instances with merge.
     *
     * @param goalsWrapper The collection of goal instances to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<GoalsResponse> patchGoalsAsync(GoalsWrapper goalsWrapper);

    /**
     * Update collection of goal instances with merge.
     *
     * @param goalsWrapper The collection of goal instances to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<ServiceResponse<GoalsResponse>> patchGoalsWithServiceResponseAsync(GoalsWrapper goalsWrapper);

    /**
     * Get an instance of a specific goal.
     *
     * @param goalId The goal identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Goal object if successful.
     */
    Goal getGoalById(String goalId);

    /**
     * Get an instance of a specific goal.
     *
     * @param goalId The goal identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Goal> getGoalByIdAsync(String goalId, final ServiceCallback<Goal> serviceCallback);

    /**
     * Get an instance of a specific goal.
     *
     * @param goalId The goal identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Goal object
     */
    Observable<Goal> getGoalByIdAsync(String goalId);

    /**
     * Get an instance of a specific goal.
     *
     * @param goalId The goal identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Goal object
     */
    Observable<ServiceResponse<Goal>> getGoalByIdWithServiceResponseAsync(String goalId);

    /**
     * Delete a goal instance.
     *
     * @param goalId The identifier of the goal to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object deleteGoal(String goalId);

    /**
     * Delete a goal instance.
     *
     * @param goalId The identifier of the goal to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteGoalAsync(String goalId, final ServiceCallback<Object> serviceCallback);

    /**
     * Delete a goal instance.
     *
     * @param goalId The identifier of the goal to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteGoalAsync(String goalId);

    /**
     * Delete a goal instance.
     *
     * @param goalId The identifier of the goal to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteGoalWithServiceResponseAsync(String goalId);

    /**
     * Get a collection of the active goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    GoalsResponse getActiveGoals();

    /**
     * Get a collection of the active goals.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GoalsResponse> getActiveGoalsAsync(final ServiceCallback<GoalsResponse> serviceCallback);

    /**
     * Get a collection of the active goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<GoalsResponse> getActiveGoalsAsync();

    /**
     * Get a collection of the active goals.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<ServiceResponse<GoalsResponse>> getActiveGoalsWithServiceResponseAsync();
    /**
     * Get a collection of the active goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the GoalsResponse object if successful.
     */
    GoalsResponse getActiveGoals(String types, String windowTypes);

    /**
     * Get a collection of the active goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<GoalsResponse> getActiveGoalsAsync(String types, String windowTypes, final ServiceCallback<GoalsResponse> serviceCallback);

    /**
     * Get a collection of the active goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<GoalsResponse> getActiveGoalsAsync(String types, String windowTypes);

    /**
     * Get a collection of the active goals.
     *
     * @param types The goal types(e.g Steps, CaloriesBurned) filter.
     * @param windowTypes The goal window types(e.g Daily, Weekly) filter.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the GoalsResponse object
     */
    Observable<ServiceResponse<GoalsResponse>> getActiveGoalsWithServiceResponseAsync(String types, String windowTypes);

    /**
     * Onboard a user.
     *
     * @param onboardingRequest The meta data associated with an onboarding request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws MicrosoftKhronosCloudCommonErrorsErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OnboardingResponse object if successful.
     */
    OnboardingResponse generateInviteCode(OnboardingRequest onboardingRequest);

    /**
     * Onboard a user.
     *
     * @param onboardingRequest The meta data associated with an onboarding request
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<OnboardingResponse> generateInviteCodeAsync(OnboardingRequest onboardingRequest, final ServiceCallback<OnboardingResponse> serviceCallback);

    /**
     * Onboard a user.
     *
     * @param onboardingRequest The meta data associated with an onboarding request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OnboardingResponse object
     */
    Observable<OnboardingResponse> generateInviteCodeAsync(OnboardingRequest onboardingRequest);

    /**
     * Onboard a user.
     *
     * @param onboardingRequest The meta data associated with an onboarding request
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OnboardingResponse object
     */
    Observable<ServiceResponse<OnboardingResponse>> generateInviteCodeWithServiceResponseAsync(OnboardingRequest onboardingRequest);

}
