/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.healthvault.restapi.implementation;

import retrofit2.Retrofit;
import com.microsoft.healthvault.restapi.ActionPlans;
import com.google.common.reflect.TypeToken;
import com.microsoft.healthvault.restapi.models.ActionPlanAdherenceSummary;
import com.microsoft.healthvault.restapi.models.ActionPlanInstanceV2;
import com.microsoft.healthvault.restapi.models.ActionPlansResponseActionPlanInstanceV2;
import com.microsoft.healthvault.restapi.models.ActionPlanV2;
import com.microsoft.healthvault.restapi.models.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import okhttp3.ResponseBody;
import org.joda.time.DateTime;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ActionPlans.
 */
public class ActionPlansImpl implements ActionPlans {
    /** The Retrofit service to perform REST calls. */
    private ActionPlansService service;
    /** The service client containing this operation class. */
    private MicrosoftHealthVaultRestApiImpl client;

    /**
     * Initializes an instance of ActionPlans.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public ActionPlansImpl(Retrofit retrofit, MicrosoftHealthVaultRestApiImpl client) {
        this.service = retrofit.create(ActionPlansService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for ActionPlans to be
     * used by Retrofit to perform actually REST calls.
     */
    interface ActionPlansService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlans get" })
        @GET("ActionPlans")
        Observable<Response<ResponseBody>> get(@Query("maxPageSize") Integer maxPageSize);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlans replace" })
        @PUT("ActionPlans")
        Observable<Response<ResponseBody>> replace(@Body ActionPlanInstanceV2 actionPlan);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlans create" })
        @POST("ActionPlans")
        Observable<Response<ResponseBody>> create(@Body ActionPlanV2 actionPlan);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlans update" })
        @PATCH("ActionPlans")
        Observable<Response<ResponseBody>> update(@Body ActionPlanInstanceV2 actionPlan);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlans getById" })
        @GET("ActionPlans/{actionPlanId}")
        Observable<Response<ResponseBody>> getById(@Path("actionPlanId") String actionPlanId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlans delete" })
        @HTTP(path = "ActionPlans/{actionPlanId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("actionPlanId") String actionPlanId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.healthvault.restapi.ActionPlans getAdherence" })
        @GET("ActionPlans/{actionPlanId}/Adherence")
        Observable<Response<ResponseBody>> getAdherence(@Path("actionPlanId") String actionPlanId, @Query("startTime") DateTime startTime, @Query("endTime") DateTime endTime, @Query("objectiveId") String objectiveId, @Query("taskId") String taskId);

    }

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstanceV2 object if successful.
     */
    public ActionPlansResponseActionPlanInstanceV2 get() {
        return getWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Get a collection of action plans.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlansResponseActionPlanInstanceV2> getAsync(final ServiceCallback<ActionPlansResponseActionPlanInstanceV2> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    public Observable<ActionPlansResponseActionPlanInstanceV2> getAsync() {
        return getWithServiceResponseAsync().map(new Func1<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>, ActionPlansResponseActionPlanInstanceV2>() {
            @Override
            public ActionPlansResponseActionPlanInstanceV2 call(ServiceResponse<ActionPlansResponseActionPlanInstanceV2> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    public Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>> getWithServiceResponseAsync() {
        final Integer maxPageSize = null;
        return service.get(maxPageSize)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlansResponseActionPlanInstanceV2> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstanceV2 object if successful.
     */
    public ActionPlansResponseActionPlanInstanceV2 get(Integer maxPageSize) {
        return getWithServiceResponseAsync(maxPageSize).toBlocking().single().body();
    }

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlansResponseActionPlanInstanceV2> getAsync(Integer maxPageSize, final ServiceCallback<ActionPlansResponseActionPlanInstanceV2> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(maxPageSize), serviceCallback);
    }

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    public Observable<ActionPlansResponseActionPlanInstanceV2> getAsync(Integer maxPageSize) {
        return getWithServiceResponseAsync(maxPageSize).map(new Func1<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>, ActionPlansResponseActionPlanInstanceV2>() {
            @Override
            public ActionPlansResponseActionPlanInstanceV2 call(ServiceResponse<ActionPlansResponseActionPlanInstanceV2> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    public Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>> getWithServiceResponseAsync(Integer maxPageSize) {
        return service.get(maxPageSize)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlansResponseActionPlanInstanceV2> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlansResponseActionPlanInstanceV2> getDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException {
        return this.client.restClient().responseBuilderFactory().<ActionPlansResponseActionPlanInstanceV2, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActionPlansResponseActionPlanInstanceV2>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstanceV2 object if successful.
     */
    public ActionPlansResponseActionPlanInstanceV2 replace(ActionPlanInstanceV2 actionPlan) {
        return replaceWithServiceResponseAsync(actionPlan).toBlocking().single().body();
    }

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlansResponseActionPlanInstanceV2> replaceAsync(ActionPlanInstanceV2 actionPlan, final ServiceCallback<ActionPlansResponseActionPlanInstanceV2> serviceCallback) {
        return ServiceFuture.fromResponse(replaceWithServiceResponseAsync(actionPlan), serviceCallback);
    }

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    public Observable<ActionPlansResponseActionPlanInstanceV2> replaceAsync(ActionPlanInstanceV2 actionPlan) {
        return replaceWithServiceResponseAsync(actionPlan).map(new Func1<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>, ActionPlansResponseActionPlanInstanceV2>() {
            @Override
            public ActionPlansResponseActionPlanInstanceV2 call(ServiceResponse<ActionPlansResponseActionPlanInstanceV2> response) {
                return response.body();
            }
        });
    }

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    public Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>> replaceWithServiceResponseAsync(ActionPlanInstanceV2 actionPlan) {
        if (actionPlan == null) {
            throw new IllegalArgumentException("Parameter actionPlan is required and cannot be null.");
        }
        Validator.validate(actionPlan);
        return service.replace(actionPlan)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlansResponseActionPlanInstanceV2> clientResponse = replaceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlansResponseActionPlanInstanceV2> replaceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ActionPlansResponseActionPlanInstanceV2, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActionPlansResponseActionPlanInstanceV2>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object create(ActionPlanV2 actionPlan) {
        return createWithServiceResponseAsync(actionPlan).toBlocking().single().body();
    }

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> createAsync(ActionPlanV2 actionPlan, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(actionPlan), serviceCallback);
    }

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> createAsync(ActionPlanV2 actionPlan) {
        return createWithServiceResponseAsync(actionPlan).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> createWithServiceResponseAsync(ActionPlanV2 actionPlan) {
        if (actionPlan == null) {
            throw new IllegalArgumentException("Parameter actionPlan is required and cannot be null.");
        }
        Validator.validate(actionPlan);
        return service.create(actionPlan)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> createDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(201, new TypeToken<ActionPlansResponseActionPlanInstanceV2>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstanceV2 object if successful.
     */
    public ActionPlansResponseActionPlanInstanceV2 update(ActionPlanInstanceV2 actionPlan) {
        return updateWithServiceResponseAsync(actionPlan).toBlocking().single().body();
    }

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlansResponseActionPlanInstanceV2> updateAsync(ActionPlanInstanceV2 actionPlan, final ServiceCallback<ActionPlansResponseActionPlanInstanceV2> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(actionPlan), serviceCallback);
    }

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    public Observable<ActionPlansResponseActionPlanInstanceV2> updateAsync(ActionPlanInstanceV2 actionPlan) {
        return updateWithServiceResponseAsync(actionPlan).map(new Func1<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>, ActionPlansResponseActionPlanInstanceV2>() {
            @Override
            public ActionPlansResponseActionPlanInstanceV2 call(ServiceResponse<ActionPlansResponseActionPlanInstanceV2> response) {
                return response.body();
            }
        });
    }

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    public Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>> updateWithServiceResponseAsync(ActionPlanInstanceV2 actionPlan) {
        if (actionPlan == null) {
            throw new IllegalArgumentException("Parameter actionPlan is required and cannot be null.");
        }
        Validator.validate(actionPlan);
        return service.update(actionPlan)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlansResponseActionPlanInstanceV2> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlansResponseActionPlanInstanceV2> updateDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ActionPlansResponseActionPlanInstanceV2, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActionPlansResponseActionPlanInstanceV2>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanInstanceV2 object if successful.
     */
    public ActionPlanInstanceV2 getById(String actionPlanId) {
        return getByIdWithServiceResponseAsync(actionPlanId).toBlocking().single().body();
    }

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanInstanceV2> getByIdAsync(String actionPlanId, final ServiceCallback<ActionPlanInstanceV2> serviceCallback) {
        return ServiceFuture.fromResponse(getByIdWithServiceResponseAsync(actionPlanId), serviceCallback);
    }

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstanceV2 object
     */
    public Observable<ActionPlanInstanceV2> getByIdAsync(String actionPlanId) {
        return getByIdWithServiceResponseAsync(actionPlanId).map(new Func1<ServiceResponse<ActionPlanInstanceV2>, ActionPlanInstanceV2>() {
            @Override
            public ActionPlanInstanceV2 call(ServiceResponse<ActionPlanInstanceV2> response) {
                return response.body();
            }
        });
    }

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstanceV2 object
     */
    public Observable<ServiceResponse<ActionPlanInstanceV2>> getByIdWithServiceResponseAsync(String actionPlanId) {
        if (actionPlanId == null) {
            throw new IllegalArgumentException("Parameter actionPlanId is required and cannot be null.");
        }
        return service.getById(actionPlanId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanInstanceV2>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanInstanceV2>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanInstanceV2> clientResponse = getByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanInstanceV2> getByIdDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ActionPlanInstanceV2, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActionPlanInstanceV2>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    public Object delete(String actionPlanId) {
        return deleteWithServiceResponseAsync(actionPlanId).toBlocking().single().body();
    }

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Object> deleteAsync(String actionPlanId, final ServiceCallback<Object> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(actionPlanId), serviceCallback);
    }

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<Object> deleteAsync(String actionPlanId) {
        return deleteWithServiceResponseAsync(actionPlanId).map(new Func1<ServiceResponse<Object>, Object>() {
            @Override
            public Object call(ServiceResponse<Object> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    public Observable<ServiceResponse<Object>> deleteWithServiceResponseAsync(String actionPlanId) {
        if (actionPlanId == null) {
            throw new IllegalArgumentException("Parameter actionPlanId is required and cannot be null.");
        }
        return service.delete(actionPlanId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Object>>>() {
                @Override
                public Observable<ServiceResponse<Object>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Object> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Object> deleteDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Object, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Object>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanAdherenceSummary object if successful.
     */
    public ActionPlanAdherenceSummary getAdherence(DateTime startTime, DateTime endTime, String actionPlanId) {
        return getAdherenceWithServiceResponseAsync(startTime, endTime, actionPlanId).toBlocking().single().body();
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanAdherenceSummary> getAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId, final ServiceCallback<ActionPlanAdherenceSummary> serviceCallback) {
        return ServiceFuture.fromResponse(getAdherenceWithServiceResponseAsync(startTime, endTime, actionPlanId), serviceCallback);
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    public Observable<ActionPlanAdherenceSummary> getAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId) {
        return getAdherenceWithServiceResponseAsync(startTime, endTime, actionPlanId).map(new Func1<ServiceResponse<ActionPlanAdherenceSummary>, ActionPlanAdherenceSummary>() {
            @Override
            public ActionPlanAdherenceSummary call(ServiceResponse<ActionPlanAdherenceSummary> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    public Observable<ServiceResponse<ActionPlanAdherenceSummary>> getAdherenceWithServiceResponseAsync(DateTime startTime, DateTime endTime, String actionPlanId) {
        if (startTime == null) {
            throw new IllegalArgumentException("Parameter startTime is required and cannot be null.");
        }
        if (endTime == null) {
            throw new IllegalArgumentException("Parameter endTime is required and cannot be null.");
        }
        if (actionPlanId == null) {
            throw new IllegalArgumentException("Parameter actionPlanId is required and cannot be null.");
        }
        final String objectiveId = null;
        final String taskId = null;
        return service.getAdherence(actionPlanId, startTime, endTime, objectiveId, taskId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanAdherenceSummary>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanAdherenceSummary>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanAdherenceSummary> clientResponse = getAdherenceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanAdherenceSummary object if successful.
     */
    public ActionPlanAdherenceSummary getAdherence(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId) {
        return getAdherenceWithServiceResponseAsync(startTime, endTime, actionPlanId, objectiveId, taskId).toBlocking().single().body();
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<ActionPlanAdherenceSummary> getAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId, final ServiceCallback<ActionPlanAdherenceSummary> serviceCallback) {
        return ServiceFuture.fromResponse(getAdherenceWithServiceResponseAsync(startTime, endTime, actionPlanId, objectiveId, taskId), serviceCallback);
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    public Observable<ActionPlanAdherenceSummary> getAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId) {
        return getAdherenceWithServiceResponseAsync(startTime, endTime, actionPlanId, objectiveId, taskId).map(new Func1<ServiceResponse<ActionPlanAdherenceSummary>, ActionPlanAdherenceSummary>() {
            @Override
            public ActionPlanAdherenceSummary call(ServiceResponse<ActionPlanAdherenceSummary> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    public Observable<ServiceResponse<ActionPlanAdherenceSummary>> getAdherenceWithServiceResponseAsync(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId) {
        if (startTime == null) {
            throw new IllegalArgumentException("Parameter startTime is required and cannot be null.");
        }
        if (endTime == null) {
            throw new IllegalArgumentException("Parameter endTime is required and cannot be null.");
        }
        if (actionPlanId == null) {
            throw new IllegalArgumentException("Parameter actionPlanId is required and cannot be null.");
        }
        return service.getAdherence(actionPlanId, startTime, endTime, objectiveId, taskId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<ActionPlanAdherenceSummary>>>() {
                @Override
                public Observable<ServiceResponse<ActionPlanAdherenceSummary>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<ActionPlanAdherenceSummary> clientResponse = getAdherenceDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<ActionPlanAdherenceSummary> getAdherenceDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<ActionPlanAdherenceSummary, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<ActionPlanAdherenceSummary>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

}
