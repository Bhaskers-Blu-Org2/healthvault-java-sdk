/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.1.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.healthvault.restapi;

import com.microsoft.healthvault.restapi.models.ActionPlanAdherenceSummary;
import com.microsoft.healthvault.restapi.models.ActionPlanInstanceV2;
import com.microsoft.healthvault.restapi.models.ActionPlansResponseActionPlanInstanceV2;
import com.microsoft.healthvault.restapi.models.ActionPlanV2;
import com.microsoft.healthvault.restapi.models.ErrorResponseException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import org.joda.time.DateTime;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in ActionPlans.
 */
public interface ActionPlans {
    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstanceV2 object if successful.
     */
    ActionPlansResponseActionPlanInstanceV2 get();

    /**
     * Get a collection of action plans.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlansResponseActionPlanInstanceV2> getAsync(final ServiceCallback<ActionPlansResponseActionPlanInstanceV2> serviceCallback);

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    Observable<ActionPlansResponseActionPlanInstanceV2> getAsync();

    /**
     * Get a collection of action plans.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>> getWithServiceResponseAsync();
    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstanceV2 object if successful.
     */
    ActionPlansResponseActionPlanInstanceV2 get(Integer maxPageSize);

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlansResponseActionPlanInstanceV2> getAsync(Integer maxPageSize, final ServiceCallback<ActionPlansResponseActionPlanInstanceV2> serviceCallback);

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    Observable<ActionPlansResponseActionPlanInstanceV2> getAsync(Integer maxPageSize);

    /**
     * Get a collection of action plans.
     *
     * @param maxPageSize The maximum number of entries to return per page. Defaults to 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>> getWithServiceResponseAsync(Integer maxPageSize);

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstanceV2 object if successful.
     */
    ActionPlansResponseActionPlanInstanceV2 replace(ActionPlanInstanceV2 actionPlan);

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlansResponseActionPlanInstanceV2> replaceAsync(ActionPlanInstanceV2 actionPlan, final ServiceCallback<ActionPlansResponseActionPlanInstanceV2> serviceCallback);

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    Observable<ActionPlansResponseActionPlanInstanceV2> replaceAsync(ActionPlanInstanceV2 actionPlan);

    /**
     * Update/Replace a complete action plan instance with no merge.
     *
     * @param actionPlan The instance of the plan to update. The entire plan will be replaced with this version.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>> replaceWithServiceResponseAsync(ActionPlanInstanceV2 actionPlan);

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object create(ActionPlanV2 actionPlan);

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> createAsync(ActionPlanV2 actionPlan, final ServiceCallback<Object> serviceCallback);

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> createAsync(ActionPlanV2 actionPlan);

    /**
     * Post an action plan instance.
     *
     * @param actionPlan The instance of the plan to create.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> createWithServiceResponseAsync(ActionPlanV2 actionPlan);

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlansResponseActionPlanInstanceV2 object if successful.
     */
    ActionPlansResponseActionPlanInstanceV2 update(ActionPlanInstanceV2 actionPlan);

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlansResponseActionPlanInstanceV2> updateAsync(ActionPlanInstanceV2 actionPlan, final ServiceCallback<ActionPlansResponseActionPlanInstanceV2> serviceCallback);

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    Observable<ActionPlansResponseActionPlanInstanceV2> updateAsync(ActionPlanInstanceV2 actionPlan);

    /**
     * Update an action plan instance with merge.
     *
     * @param actionPlan The instance of the plan to update. Only the fields present in the passed in model will be updated. All other fields and colelctions
                 will be left, as is, unless invalid.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlansResponseActionPlanInstanceV2 object
     */
    Observable<ServiceResponse<ActionPlansResponseActionPlanInstanceV2>> updateWithServiceResponseAsync(ActionPlanInstanceV2 actionPlan);

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanInstanceV2 object if successful.
     */
    ActionPlanInstanceV2 getById(String actionPlanId);

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanInstanceV2> getByIdAsync(String actionPlanId, final ServiceCallback<ActionPlanInstanceV2> serviceCallback);

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstanceV2 object
     */
    Observable<ActionPlanInstanceV2> getByIdAsync(String actionPlanId);

    /**
     * Get an instance of a specific action plan.
     *
     * @param actionPlanId The action plan to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanInstanceV2 object
     */
    Observable<ServiceResponse<ActionPlanInstanceV2>> getByIdWithServiceResponseAsync(String actionPlanId);

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the Object object if successful.
     */
    Object delete(String actionPlanId);

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Object> deleteAsync(String actionPlanId, final ServiceCallback<Object> serviceCallback);

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<Object> deleteAsync(String actionPlanId);

    /**
     * Delete an action plan instance.
     *
     * @param actionPlanId The instance of the plan to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the Object object
     */
    Observable<ServiceResponse<Object>> deleteWithServiceResponseAsync(String actionPlanId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanAdherenceSummary object if successful.
     */
    ActionPlanAdherenceSummary getAdherence(DateTime startTime, DateTime endTime, String actionPlanId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanAdherenceSummary> getAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId, final ServiceCallback<ActionPlanAdherenceSummary> serviceCallback);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    Observable<ActionPlanAdherenceSummary> getAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    Observable<ServiceResponse<ActionPlanAdherenceSummary>> getAdherenceWithServiceResponseAsync(DateTime startTime, DateTime endTime, String actionPlanId);
    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ActionPlanAdherenceSummary object if successful.
     */
    ActionPlanAdherenceSummary getAdherence(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ActionPlanAdherenceSummary> getAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId, final ServiceCallback<ActionPlanAdherenceSummary> serviceCallback);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    Observable<ActionPlanAdherenceSummary> getAdherenceAsync(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId);

    /**
     * Gets adherence information for an action plan.
     *
     * @param startTime The start time.
     * @param endTime The end time.
     * @param actionPlanId The action plan identifier.
     * @param objectiveId The objective to filter the report to.
     * @param taskId The task to filter the report to.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ActionPlanAdherenceSummary object
     */
    Observable<ServiceResponse<ActionPlanAdherenceSummary>> getAdherenceWithServiceResponseAsync(DateTime startTime, DateTime endTime, String actionPlanId, String objectiveId, String taskId);

}
